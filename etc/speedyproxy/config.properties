#!/bin/bash

# Backend IP definition
BACKEND_IP=PLACEHOLDER_BACKEND_IP

source /etc/speedyproxy/backends

if [ "$BACKEND" = "backend_ip1" ]; then BACKEND_IP="$backend_ip1"; fi
if [ "$BACKEND" = "backend_ip2" ]; then BACKEND_IP="$backend_ip2"; fi
if [ "$BACKEND" = "backend_ip3" ]; then BACKEND_IP="$backend_ip3"; fi
if [ "$BACKEND" = "backend_ip4" ]; then BACKEND_IP="$backend_ip4"; fi
if [ "$BACKEND" = "backend_ip5" ]; then BACKEND_IP="$backend_ip5"; fi
if [ "$BACKEND" = "backend_ip6" ]; then BACKEND_IP="$backend_ip6"; fi
if [ "$BACKEND" = "backend_ip7" ]; then BACKEND_IP="$backend_ip7"; fi
if [ "$BACKEND" = "backend_ip8" ]; then BACKEND_IP="$backend_ip8"; fi
if [ "$BACKEND" = "backend_ip9" ]; then BACKEND_IP="$backend_ip9"; fi
if [ "$BACKEND" = "backend_ip10" ]; then BACKEND_IP="$backend_ip10"; fi
if [ "$BACKEND" = "backend_ip11" ]; then BACKEND_IP="$backend_ip11"; fi
if [ "$BACKEND" = "backend_ip12" ]; then BACKEND_IP="$backend_ip12"; fi
if [ "$BACKEND" = "backend_ip13" ]; then BACKEND_IP="$backend_ip13"; fi
if [ "$BACKEND" = "backend_ip14" ]; then BACKEND_IP="$backend_ip14"; fi
if [ "$BACKEND" = "backend_ip15" ]; then BACKEND_IP="$backend_ip15"; fi



# Frontend IP definition
FRONTEND_IP=PLACEHOLDER_FRONTEND_IP
frontend_ip1="PLACEHOLDER_FRONTEND_IP1"  	# number 1
frontend_ip2="PLACEHOLDER_FRONTEND_IP2"		# number 2
frontend_ip3="PLACEHOLDER_FRONTEND_IP3"		# number 3

if [ "$FRONTEND" = "frontend_ip1" ]; then FRONTEND_IP="$frontend_ip1"; fi
if [ "$FRONTEND" = "frontend_ip2" ]; then FRONTEND_IP="$frontend_ip2"; fi
if [ "$FRONTEND" = "frontend_ip3" ]; then FRONTEND_IP="$frontend_ip3"; fi

# Frontend SSL settings

frontend_ip1_ssl_cert=
frontend_ip1_ssl_key=

# Basic variable definition

# tady budou vsechny konfigurace domen, vcetne aliasu
NGINX_CONFIG_DIR=/etc/nginx/speedyproxy/
# tady budou klice + ssl konfigurace per frontend
NGINX_CONFIG_SSL_DIR=/etc/nginx/speedyproxy.ssl/

# templaty
NGINX_DOMAIN_TEMPLATE=/etc/speedyproxy/nginx_templates/domain
NGINX_DOMAIN_LETSENCRYPT_TEMPLATE=/etc/speedyproxy/nginx_templates/domain_letsencrypt
NGINX_ALIAS_TEMPLATE=/etc/speedyproxy/nginx_templates/alias
NGINX_REDIRECT_TEMPLATE=/etc/speedyproxy/nginx_templates/redirect
NGINX_REDIRECT_URL_TEMPLATE=/etc/speedyproxy/nginx_templates/redirect_url

# Let's Encrypt
LETSENCRYPT_INSTALLDIR=/opt/letsencrypt
LETSENCRYPT_WEBROOT=/var/www/webroot/

variable_validation () {

echo "Variable validation"

if [ -z "${NGINX_CONFIG_DIR}" ]; then echo "Variable NGINX_CONFIG_DIR is empty!"; exit 1; fi
if [ -z "${NGINX_CONFIG_SSL_DIR}" ]; then echo "Variable NGINX_CONFIG_SSL_DIR is empty!"; exit 1; fi
if [ -z "${DOMAIN}" ]; then echo "Variable DOMAIN is empty!"; exit 1; fi
if [ -z "${FRONTEND}" ]; then echo "Variable FRONTEND is empty!"; exit 1; fi
if [ -z "${BACKEND}" ]; then echo "Variable FRONTEND is empty!"; exit 1; fi
if [ -z "${NGINX_REDIRECT_URL_TEMPLATE}" ]; then echo "Variable NGINX_REDIRECT_URL_TEMPLATE is empty!"; exit 1; fi

echo "Variable validation: passed"

}


domain_validation () {

DOMAIN=$1

echo "Domain validation: $DOMAIN"

if [ -z "${DOMAIN}" ]; then echo "Variable DOMAIN is empty!"; exit 1; fi

a=$(echo $1 | egrep "^($BLACKLISTDOMAIN)$"| wc -l)
if [ $a -gt 0 ]; then echo "Warn: blacklisted domainname"; exit 1; fi

test_err=$(echo "${DOMAIN}" | grep -P '(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)')

if [ "$test_err" != "${DOMAIN}" ]; then echo "Domain validation failed!"; exit 1; fi

echo "Domain validation: passed"

}


domain_exist () {

DOMAIN=$1

if [ ! -f  "$NGINX_CONFIG_DIR/$DOMAIN.conf" ]; then 
	echo "DOMAIN file $DOMAIN.conf does not exist"; exit 1;
fi

if [ ! -f  "$NGINX_CONFIG_DIR/$DOMAIN.conf.alias" ]; then 
	echo "ALIAS file $DOMAIN.conf.alias does not exist"; exit 1;
fi

a=$(grep "$DOMAIN"  $NGINX_CONFIG_DIR/*.conf.* |wc -l)

if [ ! "$a" -gt 0 ]; then
	echo "$DOMAIN already exists. "; exit 1;
fi


echo "Domain $DOMAIN exists: passed"
}

domain_alias_exist () {

DOMAIN=$1
ALIAS=$2

if [ -z "${DOMAIN}" ]; then echo "Variable DOMAIN is empty!"; exit 1; fi
if [ -z "${ALIAS}" ]; then echo "Variable ALIAS is empty!"; exit 1; fi

a=$(grep $ALIAS $NGINX_CONFIG_DIR/*.conf.* |wc -l)

if [ "$a" -gt 0 ]; then
	echo "Alias $ALIAS already exist. "; exit 1;
fi

echo "Alias $ALIAS for Domain $DOMAIN exists: passed"

}

domain_alias_notexist () {

DOMAIN=$1
ALIAS=$2

if [ -z "${DOMAIN}" ]; then echo "Variable DOMAIN is empty!"; exit 1; fi
if [ -z "${ALIAS}" ]; then echo "Variable ALIAS is empty!"; exit 1; fi

a=$(grep "server_name\ $ALIAS\;"  $NGINX_CONFIG_DIR/*.conf.* |wc -l)

if [ ! "$a" -gt 0 ]; then
	echo "Alias $ALIAS does not exist. "; exit 1;
fi

}

check_existence () {

b=$(echo $1 | sed 's/\./\\\./')

a=$(grep "\ $b"  $NGINX_CONFIG_DIR/* |wc -l)

if [  "$a" -gt 0 ]; then
	echo "$1 already exists. "; exit 1;
fi

}

# Let's encrypt

letsencrypt_genkeys () {

DOMAIN=$1

echo "Starting" >> //var/log/speedyproxy-letsencrypt.log
date >> //var/log/speedyproxy-letsencrypt.log
$LETSENCRYPT_INSTALLDIR/letsencrypt-auto certonly --force-renewal -n -a webroot --webroot-path=$LETSENCRYPT_WEBROOT -d $DOMAIN -d www.$DOMAIN 2>&1 >> //var/log/speedyproxy-letsencrypt.log
date >> //var/log/speedyproxy-letsencrypt.log
echo "Finished" >> //var/log/speedyproxy-letsencrypt.log

} 
